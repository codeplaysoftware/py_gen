#   Copyright (C) Codeplay Software Limited.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use these files except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   For your convenience, a copy of the License has been included in this
#   repository.
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

from enum import Enum


class Itermode(Enum):
    """Enum of the supported combinatoric generators. Used to determine which
    generator to use for each Iterable."""
    product = 1
    permutations = 2
    combinations = 3
    combinationsWR = 4
    uninitialised = 5


class Iterable:
    """Describes a set of values, a combinatoric generator to use on them, and
    a key to insert the results into a template with."""

    def __init__(self,
                 key='',
                 vals=[],
                 itermode=Itermode.uninitialised,
                 iter_modifier=1,
                 comma_list=False):
        self.key = key
        self.vals = vals
        self.itermode = itermode
        self.iter_modifier = iter_modifier
        self.comma_list = comma_list


class IterGroup:
    """Groups together an insertion point, string Template, and list of
    iterables. If combine_iters == True, the iterables must all produce the same
    number of results. combine_iters = False will use all of one Iterables
    generations before moving on to the next Iterable. combine_iters = True will
    use the 1->nth result of each Iterable at the same time, until all
    generations have been exhausted."""

    def __init__(self,
                 insertion_point,
                 template,
                 iterables,
                 combine_iters=False):
        self.insertion_point = insertion_point
        self.template = template
        self.iterables = iterables
        self.combine_iters = combine_iters


class RemovalIterGroup:
    """Groups together an insertion point, string Template, and two lists of
    iterables. The first list of iterables will be used to generate combinations
    of their inputs. Each output generated by the second list will then be
    removed from each of the first lists outputs. The IterGroup will from this
    point on act as a normal IterGroup.
    If combine_iters == True, the first list of iterables must all produce the
    same number of results. combine_iters = False will use all of one Iterables
    generations before moving on to the next Iterable. combine_iters = True will
    use the 1-nth result of each Iterable at the same time, until all
    generations have been exhausted."""

    def __init__(self,
                 insertion_point,
                 template,
                 insertion_iterables,
                 removal_iterables,
                 combine_iters=False):
        self.insertion_point = insertion_point
        self.template = template
        self.insertion_iterables = insertion_iterables
        self.removal_iterables = removal_iterables
        self.combine_iters = combine_iters
